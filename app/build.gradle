apply plugin: 'com.android.application'
//apply plugin: 'com.jakewharton.butterknife'
//com.example.songup.modelmvpapp
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    flavorDimensions "default"
    defaultConfig {
        applicationId "com.example.songup.modelmvpapp"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        //开启分包
        multiDexEnabled true
//        javaCompileOptions {
//            //java注解器的使用，在编译的使用会处理注解
//            annotationProcessorOptions {
//                arguments = [moduleName: project.getName()]
//            }
//        }
    }
    signingConfigs {
        sign {
            storeFile file("modelmvp.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
        dev {
            storeFile file("modelmvp.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"

        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.sign

            minifyEnabled true
            zipAlignEnabled true// Zipalign优化
            shrinkResources true// 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.dev
            minifyEnabled false
        }
    }
    productFlavors {
//        applicationVariants.all { variant ->
//            variant.outputs.all { output ->
//                def outputFile = output.outputFile
//                def fileName = "${variant.buildType.name}-modelMvp-${defaultConfig.versionName}-${releaseTime()}.apk"
//                outputFileName = new File(outputFile.parent, fileName)
//            }
//        }
//        applicationVariants.all { variant ->
//            variant.outputs.all {
//                outputFileName = "${variant.buildType.name}-modelMvp-${defaultConfig.versionName}-${releaseTime()}.apk"
//            }
//        }
        beta{
            applicationId "com.example.songup.beta"
            signingConfig signingConfigs.sign
            manifestPlaceholders = [
                    app_name  : "测试版本",
                    appIcon: "@mipmap/app_icon_bate"
            ]
            buildConfigField("String", "HOST_URL", "\"https://wwwtestapi.bwit.cc//cn/cgi/app/0/%s/\"")//这个是最常用到的
            buildConfigField("boolean", "MONITOR", "false")
            buildConfigField "String[]", "HOST_URL_Array",
                    "{" +
                            "\"https://123.140.238.36\"" +
                            "}"
            buildConfigField("String", "TINKER_ID", "\"31220fa985\"")
        }
        xiaomi{//小米
            applicationId "com.example.songup.xiaomi"
            signingConfig signingConfigs.sign
            manifestPlaceholders = [
                    app_name  : "小米版本",
                    appIcon: "@mipmap/app_icon_panad"
            ]
            buildConfigField("String", "COMPANY_CODE", "\"yunding\"")
            buildConfigField("boolean", "MONITOR", "false")
            //备用域名下载地址
            buildConfigField "String[]", "HOST_URL_Array",
                    "{" +
                            "\"https://123.140.238.37\"" +
                            "}"
            buildConfigField("String", "TINKER_ID", "\"31220fa985\"")
            resValue "string", "res_app_name", "\"预测环境\""
            resValue "string", "app_protocol", "\"《预测环境开户协议》\""
        }


    }

    //针对多资源重复的问题，它会要求所有的资源文件加上app_
    resourcePrefix 'app_'

    //设置dexOptions的，不做方法数限制的检查，这样做的缺点是apk无法再低版本的设备上面安装，会出现错误
    dexOptions {
        jumboMode true
    }

    //打包时不在因为错误终端
    lintOptions {
//        checkReleaseBuilds false
//        abortOnError false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation rootProject.ext.dependencies["junit"]
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    //    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //包含全部需要的库
    implementation project(':opensourcelibrary')
    //这个只能单独配置
    api rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife_compiler"]


}


